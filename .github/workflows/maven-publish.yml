name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Scan for Secrets
      uses: zricethezav/gitleaks-action@v1.3.0
      with:
        config: gitleaks.toml

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=CI-CD-GitHub \
          -Dsonar.host.url=//http://192.168.43.252:9000 \
          -Dsonar.login=$SONAR_TOKEN    

    - name: Display current version
      run: mvn help:evaluate -Dexpression=project.version -q -DforceStdout

    - name: Update version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $CURRENT_VERSION"
        NEW_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//' | awk -F'.' '{printf "%d.%d.%d", $1, $2, $3+1}')
        echo "New version: $NEW_VERSION"
        mvn versions:set -DnewVersion=$NEW_VERSION
        mvn versions:commit
        echo "Updated version in POM:"
        cat pom.xml | grep "<version>"

    - name: Commit updated POM
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add pom.xml
        git commit -m "Update project version to $NEW_VERSION [skip ci]"
        git push

    - name: Get project version
      id: project_version
      run: |
        NEW_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Setting output VERSION to $NEW_VERSION"
        echo "::set-output name=VERSION::$NEW_VERSION"

    - name: Build with Maven
      run: mvn clean package
    
    - name: Install Snyk
      run: npm install -g snyk

    - name: Run Snyk to check for vulnerabilities
      run: snyk test --file=pom.xml --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk to check Dockerfile for vulnerabilities
      run: snyk test --dockerfile=Dockerfile --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Get JAR file name
      id: jar_name
      run: echo "::set-output name=JAR_NAME::$(ls target | grep '.jar$')"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker buildx build --platform linux/amd64 \
        --build-arg JAR_FILE=target/${{ steps.jar_name.outputs.JAR_NAME }} \
        --tag dinbl/java_app:${{ steps.project_version.outputs.VERSION }} \
        --push .
